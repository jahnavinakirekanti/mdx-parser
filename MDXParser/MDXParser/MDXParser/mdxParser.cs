//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from mdx.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class mdxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		QUOTE=1, ASTERISK=2, COLON=3, SEMICOLON=4, COMMA=5, CONCAT=6, DOT=7, EQ=8, 
		GE=9, GT=10, LBRACE=11, LE=12, LPAREN=13, LT=14, MINUS=15, NE=16, PLUS=17, 
		RBRACE=18, RPAREN=19, SOLIDUS=20, AND=21, AS=22, CASE=23, CELL=24, CELL_ORDINAL=25, 
		CREATE=26, DIMENSION=27, ELSE=28, EMPTY=29, END=30, FORMATTED_VALUE=31, 
		FROM=32, GLOBAL=33, MEMBER=34, NON=35, NOT=36, ON=37, OR=38, PROPERTIES=39, 
		SELECT=40, SESSION=41, SET=42, THEN=43, VALUE=44, WHEN=45, WHERE=46, XOR=47, 
		WITH=48, NUMBER=49, F=50, ID=51, AMP_QUOTED_ID=52, QUOTED_ID=53, STRING=54, 
		WS=55;
	public const int
		RULE_mdx_statement = 0, RULE_select_statement = 1, RULE_formula_specification = 2, 
		RULE_single_formula_specification = 3, RULE_set_specification = 4, RULE_member_specification = 5, 
		RULE_axis_specification_list = 6, RULE_member_property_def_list = 7, RULE_member_name = 8, 
		RULE_member_property_definition = 9, RULE_set_name = 10, RULE_compound_id = 11, 
		RULE_axis_specification = 12, RULE_axis_name = 13, RULE_dim_props = 14, 
		RULE_property_list = 15, RULE_property = 16, RULE_cube_specification = 17, 
		RULE_cube_name = 18, RULE_slicer_specification = 19, RULE_cell_props = 20, 
		RULE_cell_property_list = 21, RULE_cell_property = 22, RULE_mandatory_cell_property = 23, 
		RULE_provider_specific_cell_property = 24, RULE_expression = 25, RULE_value_expression = 26, 
		RULE_value_xor_expression = 27, RULE_value_or_expression = 28, RULE_term5 = 29, 
		RULE_term4 = 30, RULE_term3 = 31, RULE_term2 = 32, RULE_term = 33, RULE_factor = 34, 
		RULE_function = 35, RULE_value_expression_primary = 36, RULE_value_expression_primary0 = 37, 
		RULE_exp_list = 38, RULE_case_expression = 39, RULE_when_list = 40, RULE_when_clause = 41, 
		RULE_comp_op = 42, RULE_identifier = 43, RULE_unquoted_identifier = 44, 
		RULE_amp_quoted_identifier = 45, RULE_quoted_identifier = 46, RULE_keyword = 47;
	public static readonly string[] ruleNames = {
		"mdx_statement", "select_statement", "formula_specification", "single_formula_specification", 
		"set_specification", "member_specification", "axis_specification_list", 
		"member_property_def_list", "member_name", "member_property_definition", 
		"set_name", "compound_id", "axis_specification", "axis_name", "dim_props", 
		"property_list", "property", "cube_specification", "cube_name", "slicer_specification", 
		"cell_props", "cell_property_list", "cell_property", "mandatory_cell_property", 
		"provider_specific_cell_property", "expression", "value_expression", "value_xor_expression", 
		"value_or_expression", "term5", "term4", "term3", "term2", "term", "factor", 
		"function", "value_expression_primary", "value_expression_primary0", "exp_list", 
		"case_expression", "when_list", "when_clause", "comp_op", "identifier", 
		"unquoted_identifier", "amp_quoted_identifier", "quoted_identifier", "keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'*'", "':'", "';'", "','", "'||'", "'.'", "'='", "'>='", 
		"'>'", "'{'", "'<='", "'('", "'<'", "'-'", "'<>'", "'+'", "'}'", "')'", 
		"'/'", "'AND'", "'AS'", "'CASE'", "'CELL'", "'CELL_ORDINAL'", "'CREATE'", 
		"'DIMENSION'", "'ELSE'", "'EMPTY'", "'END'", "'FORMATTED_VALUE'", "'FROM'", 
		"'GLOBAL'", "'MEMBER'", "'NON'", "'NOT'", "'ON'", "'OR'", "'PROPERTIES'", 
		"'SELECT'", "'SESSION'", "'SET'", "'THEN'", "'VALUE'", "'WHEN'", "'WHERE'", 
		"'XOR'", "'WITH'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "QUOTE", "ASTERISK", "COLON", "SEMICOLON", "COMMA", "CONCAT", "DOT", 
		"EQ", "GE", "GT", "LBRACE", "LE", "LPAREN", "LT", "MINUS", "NE", "PLUS", 
		"RBRACE", "RPAREN", "SOLIDUS", "AND", "AS", "CASE", "CELL", "CELL_ORDINAL", 
		"CREATE", "DIMENSION", "ELSE", "EMPTY", "END", "FORMATTED_VALUE", "FROM", 
		"GLOBAL", "MEMBER", "NON", "NOT", "ON", "OR", "PROPERTIES", "SELECT", 
		"SESSION", "SET", "THEN", "VALUE", "WHEN", "WHERE", "XOR", "WITH", "NUMBER", 
		"F", "ID", "AMP_QUOTED_ID", "QUOTED_ID", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "mdx.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static mdxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public mdxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public mdxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Mdx_statementContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(mdxParser.Eof, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Mdx_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mdx_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterMdx_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitMdx_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMdx_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mdx_statementContext mdx_statement() {
		Mdx_statementContext _localctx = new Mdx_statementContext(Context, State);
		EnterRule(_localctx, 0, RULE_mdx_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 96; select_statement();
			}
			State = 97; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(mdxParser.SELECT, 0); }
		public ITerminalNode FROM() { return GetToken(mdxParser.FROM, 0); }
		public Cube_specificationContext cube_specification() {
			return GetRuleContext<Cube_specificationContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(mdxParser.WITH, 0); }
		public Formula_specificationContext formula_specification() {
			return GetRuleContext<Formula_specificationContext>(0);
		}
		public Axis_specification_listContext axis_specification_list() {
			return GetRuleContext<Axis_specification_listContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(mdxParser.WHERE, 0); }
		public Slicer_specificationContext slicer_specification() {
			return GetRuleContext<Slicer_specificationContext>(0);
		}
		public Cell_propsContext cell_props() {
			return GetRuleContext<Cell_propsContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 99; Match(WITH);
				State = 100; formula_specification();
				}
			}

			State = 103; Match(SELECT);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LPAREN) | (1L << MINUS) | (1L << PLUS) | (1L << CASE) | (1L << DIMENSION) | (1L << NON) | (1L << NOT) | (1L << PROPERTIES) | (1L << NUMBER) | (1L << ID) | (1L << QUOTED_ID) | (1L << STRING))) != 0)) {
				{
				State = 104; axis_specification_list();
				}
			}

			State = 107; Match(FROM);
			State = 108; cube_specification();
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 109; Match(WHERE);
				State = 110; slicer_specification();
				}
			}

			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CELL || _la==PROPERTIES) {
				{
				State = 113; cell_props();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formula_specificationContext : ParserRuleContext {
		public Single_formula_specificationContext[] single_formula_specification() {
			return GetRuleContexts<Single_formula_specificationContext>();
		}
		public Single_formula_specificationContext single_formula_specification(int i) {
			return GetRuleContext<Single_formula_specificationContext>(i);
		}
		public Formula_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterFormula_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitFormula_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formula_specificationContext formula_specification() {
		Formula_specificationContext _localctx = new Formula_specificationContext(Context, State);
		EnterRule(_localctx, 4, RULE_formula_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 116; single_formula_specification();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MEMBER || _la==SET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_formula_specificationContext : ParserRuleContext {
		public Member_specificationContext member_specification() {
			return GetRuleContext<Member_specificationContext>(0);
		}
		public Set_specificationContext set_specification() {
			return GetRuleContext<Set_specificationContext>(0);
		}
		public Single_formula_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_formula_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterSingle_formula_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitSingle_formula_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_formula_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_formula_specificationContext single_formula_specification() {
		Single_formula_specificationContext _localctx = new Single_formula_specificationContext(Context, State);
		EnterRule(_localctx, 6, RULE_single_formula_specification);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MEMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; member_specification();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; set_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specificationContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(mdxParser.SET, 0); }
		public Set_nameContext set_name() {
			return GetRuleContext<Set_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(mdxParser.AS, 0); }
		public ITerminalNode[] QUOTE() { return GetTokens(mdxParser.QUOTE); }
		public ITerminalNode QUOTE(int i) {
			return GetToken(mdxParser.QUOTE, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Set_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterSet_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitSet_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_specificationContext set_specification() {
		Set_specificationContext _localctx = new Set_specificationContext(Context, State);
		EnterRule(_localctx, 8, RULE_set_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(SET);
			State = 126; set_name();
			State = 127; Match(AS);
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTE:
				{
				State = 128; Match(QUOTE);
				State = 129; expression();
				State = 130; Match(QUOTE);
				}
				break;
			case LBRACE:
			case LPAREN:
			case MINUS:
			case PLUS:
			case CASE:
			case DIMENSION:
			case NOT:
			case PROPERTIES:
			case NUMBER:
			case ID:
			case QUOTED_ID:
			case STRING:
				{
				State = 132; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_specificationContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(mdxParser.MEMBER, 0); }
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(mdxParser.AS, 0); }
		public ITerminalNode COMMA() { return GetToken(mdxParser.COMMA, 0); }
		public ITerminalNode[] QUOTE() { return GetTokens(mdxParser.QUOTE); }
		public ITerminalNode QUOTE(int i) {
			return GetToken(mdxParser.QUOTE, i);
		}
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public Member_property_def_listContext member_property_def_list() {
			return GetRuleContext<Member_property_def_listContext>(0);
		}
		public Member_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterMember_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitMember_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_specificationContext member_specification() {
		Member_specificationContext _localctx = new Member_specificationContext(Context, State);
		EnterRule(_localctx, 10, RULE_member_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(MEMBER);
			State = 136; member_name();
			State = 137; Match(AS);
			{
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTE:
				{
				State = 138; Match(QUOTE);
				State = 139; value_expression();
				State = 140; Match(QUOTE);
				}
				break;
			case LBRACE:
			case LPAREN:
			case MINUS:
			case PLUS:
			case CASE:
			case DIMENSION:
			case NOT:
			case PROPERTIES:
			case NUMBER:
			case ID:
			case QUOTED_ID:
			case STRING:
				{
				State = 142; value_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 145; Match(COMMA);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIMENSION) | (1L << PROPERTIES) | (1L << ID) | (1L << QUOTED_ID))) != 0)) {
				{
				State = 146; member_property_def_list();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Axis_specification_listContext : ParserRuleContext {
		public Axis_specificationContext[] axis_specification() {
			return GetRuleContexts<Axis_specificationContext>();
		}
		public Axis_specificationContext axis_specification(int i) {
			return GetRuleContext<Axis_specificationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(mdxParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(mdxParser.COMMA, i);
		}
		public Axis_specification_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axis_specification_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterAxis_specification_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitAxis_specification_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAxis_specification_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Axis_specification_listContext axis_specification_list() {
		Axis_specification_listContext _localctx = new Axis_specification_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_axis_specification_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; axis_specification();
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 150; Match(COMMA);
				State = 151; axis_specification();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_property_def_listContext : ParserRuleContext {
		public Member_property_definitionContext[] member_property_definition() {
			return GetRuleContexts<Member_property_definitionContext>();
		}
		public Member_property_definitionContext member_property_definition(int i) {
			return GetRuleContext<Member_property_definitionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(mdxParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(mdxParser.COMMA, i);
		}
		public Member_property_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_property_def_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterMember_property_def_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitMember_property_def_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_property_def_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_property_def_listContext member_property_def_list() {
		Member_property_def_listContext _localctx = new Member_property_def_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_member_property_def_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; member_property_definition();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 158; Match(COMMA);
				State = 159; member_property_definition();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		public Compound_idContext compound_id() {
			return GetRuleContext<Compound_idContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 16, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; compound_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_property_definitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(mdxParser.EQ, 0); }
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public Member_property_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_property_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterMember_property_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitMember_property_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_property_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_property_definitionContext member_property_definition() {
		Member_property_definitionContext _localctx = new Member_property_definitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_member_property_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; identifier();
			State = 168; Match(EQ);
			State = 169; value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_nameContext : ParserRuleContext {
		public Compound_idContext compound_id() {
			return GetRuleContext<Compound_idContext>(0);
		}
		public Set_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterSet_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitSet_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_nameContext set_name() {
		Set_nameContext _localctx = new Set_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_set_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; compound_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_idContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(mdxParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(mdxParser.DOT, i);
		}
		public Compound_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterCompound_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitCompound_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_idContext compound_id() {
		Compound_idContext _localctx = new Compound_idContext(Context, State);
		EnterRule(_localctx, 22, RULE_compound_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; identifier();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 174; Match(DOT);
				State = 175; identifier();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Axis_specificationContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ON() { return GetToken(mdxParser.ON, 0); }
		public Axis_nameContext axis_name() {
			return GetRuleContext<Axis_nameContext>(0);
		}
		public ITerminalNode NON() { return GetToken(mdxParser.NON, 0); }
		public ITerminalNode EMPTY() { return GetToken(mdxParser.EMPTY, 0); }
		public Dim_propsContext dim_props() {
			return GetRuleContext<Dim_propsContext>(0);
		}
		public Axis_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axis_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterAxis_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitAxis_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAxis_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Axis_specificationContext axis_specification() {
		Axis_specificationContext _localctx = new Axis_specificationContext(Context, State);
		EnterRule(_localctx, 24, RULE_axis_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NON) {
				{
				State = 181; Match(NON);
				State = 182; Match(EMPTY);
				}
			}

			State = 185; expression();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIMENSION || _la==PROPERTIES) {
				{
				State = 186; dim_props();
				}
			}

			State = 189; Match(ON);
			State = 190; axis_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Axis_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Axis_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axis_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterAxis_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitAxis_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAxis_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Axis_nameContext axis_name() {
		Axis_nameContext _localctx = new Axis_nameContext(Context, State);
		EnterRule(_localctx, 26, RULE_axis_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dim_propsContext : ParserRuleContext {
		public ITerminalNode PROPERTIES() { return GetToken(mdxParser.PROPERTIES, 0); }
		public Property_listContext property_list() {
			return GetRuleContext<Property_listContext>(0);
		}
		public ITerminalNode DIMENSION() { return GetToken(mdxParser.DIMENSION, 0); }
		public Dim_propsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dim_props; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterDim_props(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitDim_props(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDim_props(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dim_propsContext dim_props() {
		Dim_propsContext _localctx = new Dim_propsContext(Context, State);
		EnterRule(_localctx, 28, RULE_dim_props);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIMENSION) {
				{
				State = 194; Match(DIMENSION);
				}
			}

			State = 197; Match(PROPERTIES);
			State = 198; property_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_listContext : ParserRuleContext {
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(mdxParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(mdxParser.COMMA, i);
		}
		public Property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterProperty_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitProperty_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_listContext property_list() {
		Property_listContext _localctx = new Property_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_property_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; property();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 201; Match(COMMA);
				State = 202; property();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public Compound_idContext compound_id() {
			return GetRuleContext<Compound_idContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 32, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; compound_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_specificationContext : ParserRuleContext {
		public Cube_nameContext cube_name() {
			return GetRuleContext<Cube_nameContext>(0);
		}
		public Cube_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterCube_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitCube_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cube_specificationContext cube_specification() {
		Cube_specificationContext _localctx = new Cube_specificationContext(Context, State);
		EnterRule(_localctx, 34, RULE_cube_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; cube_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_nameContext : ParserRuleContext {
		public Compound_idContext compound_id() {
			return GetRuleContext<Compound_idContext>(0);
		}
		public Cube_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterCube_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitCube_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cube_nameContext cube_name() {
		Cube_nameContext _localctx = new Cube_nameContext(Context, State);
		EnterRule(_localctx, 36, RULE_cube_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; compound_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slicer_specificationContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Slicer_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slicer_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterSlicer_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitSlicer_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlicer_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Slicer_specificationContext slicer_specification() {
		Slicer_specificationContext _localctx = new Slicer_specificationContext(Context, State);
		EnterRule(_localctx, 38, RULE_slicer_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_propsContext : ParserRuleContext {
		public ITerminalNode PROPERTIES() { return GetToken(mdxParser.PROPERTIES, 0); }
		public Cell_property_listContext cell_property_list() {
			return GetRuleContext<Cell_property_listContext>(0);
		}
		public ITerminalNode CELL() { return GetToken(mdxParser.CELL, 0); }
		public Cell_propsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_props; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterCell_props(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitCell_props(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_props(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_propsContext cell_props() {
		Cell_propsContext _localctx = new Cell_propsContext(Context, State);
		EnterRule(_localctx, 40, RULE_cell_props);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CELL) {
				{
				State = 216; Match(CELL);
				}
			}

			State = 219; Match(PROPERTIES);
			State = 220; cell_property_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_property_listContext : ParserRuleContext {
		public Cell_propertyContext[] cell_property() {
			return GetRuleContexts<Cell_propertyContext>();
		}
		public Cell_propertyContext cell_property(int i) {
			return GetRuleContext<Cell_propertyContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(mdxParser.COMMA, 0); }
		public Cell_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterCell_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitCell_property_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_property_listContext cell_property_list() {
		Cell_property_listContext _localctx = new Cell_property_listContext(Context, State);
		EnterRule(_localctx, 42, RULE_cell_property_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; cell_property();
			State = 223; Match(COMMA);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CELL_ORDINAL) | (1L << DIMENSION) | (1L << FORMATTED_VALUE) | (1L << PROPERTIES) | (1L << VALUE) | (1L << ID) | (1L << QUOTED_ID))) != 0)) {
				{
				{
				State = 224; cell_property();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_propertyContext : ParserRuleContext {
		public Mandatory_cell_propertyContext mandatory_cell_property() {
			return GetRuleContext<Mandatory_cell_propertyContext>(0);
		}
		public Provider_specific_cell_propertyContext provider_specific_cell_property() {
			return GetRuleContext<Provider_specific_cell_propertyContext>(0);
		}
		public Cell_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterCell_property(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitCell_property(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_propertyContext cell_property() {
		Cell_propertyContext _localctx = new Cell_propertyContext(Context, State);
		EnterRule(_localctx, 44, RULE_cell_property);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CELL_ORDINAL:
			case FORMATTED_VALUE:
			case VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230; mandatory_cell_property();
				}
				break;
			case DIMENSION:
			case PROPERTIES:
			case ID:
			case QUOTED_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231; provider_specific_cell_property();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mandatory_cell_propertyContext : ParserRuleContext {
		public ITerminalNode CELL_ORDINAL() { return GetToken(mdxParser.CELL_ORDINAL, 0); }
		public ITerminalNode VALUE() { return GetToken(mdxParser.VALUE, 0); }
		public ITerminalNode FORMATTED_VALUE() { return GetToken(mdxParser.FORMATTED_VALUE, 0); }
		public Mandatory_cell_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mandatory_cell_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterMandatory_cell_property(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitMandatory_cell_property(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMandatory_cell_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mandatory_cell_propertyContext mandatory_cell_property() {
		Mandatory_cell_propertyContext _localctx = new Mandatory_cell_propertyContext(Context, State);
		EnterRule(_localctx, 46, RULE_mandatory_cell_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CELL_ORDINAL) | (1L << FORMATTED_VALUE) | (1L << VALUE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Provider_specific_cell_propertyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Provider_specific_cell_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_provider_specific_cell_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterProvider_specific_cell_property(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitProvider_specific_cell_property(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProvider_specific_cell_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Provider_specific_cell_propertyContext provider_specific_cell_property() {
		Provider_specific_cell_propertyContext _localctx = new Provider_specific_cell_propertyContext(Context, State);
		EnterRule(_localctx, 48, RULE_provider_specific_cell_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Value_expressionContext[] value_expression() {
			return GetRuleContexts<Value_expressionContext>();
		}
		public Value_expressionContext value_expression(int i) {
			return GetRuleContext<Value_expressionContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(mdxParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(mdxParser.COLON, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; value_expression();
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 239; Match(COLON);
				State = 240; value_expression();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_expressionContext : ParserRuleContext {
		public Term5Context term5() {
			return GetRuleContext<Term5Context>(0);
		}
		public Value_xor_expressionContext[] value_xor_expression() {
			return GetRuleContexts<Value_xor_expressionContext>();
		}
		public Value_xor_expressionContext value_xor_expression(int i) {
			return GetRuleContext<Value_xor_expressionContext>(i);
		}
		public Value_or_expressionContext[] value_or_expression() {
			return GetRuleContexts<Value_or_expressionContext>();
		}
		public Value_or_expressionContext value_or_expression(int i) {
			return GetRuleContext<Value_or_expressionContext>(i);
		}
		public Value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterValue_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitValue_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_expressionContext value_expression() {
		Value_expressionContext _localctx = new Value_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_value_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; term5();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR || _la==XOR) {
				{
				State = 249;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case XOR:
					{
					State = 247; value_xor_expression();
					}
					break;
				case OR:
					{
					State = 248; value_or_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_xor_expressionContext : ParserRuleContext {
		public ITerminalNode XOR() { return GetToken(mdxParser.XOR, 0); }
		public Term5Context term5() {
			return GetRuleContext<Term5Context>(0);
		}
		public Value_xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_xor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterValue_xor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitValue_xor_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_xor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_xor_expressionContext value_xor_expression() {
		Value_xor_expressionContext _localctx = new Value_xor_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_value_xor_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(XOR);
			State = 255; term5();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_or_expressionContext : ParserRuleContext {
		public ITerminalNode OR() { return GetToken(mdxParser.OR, 0); }
		public Term5Context term5() {
			return GetRuleContext<Term5Context>(0);
		}
		public Value_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterValue_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitValue_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_or_expressionContext value_or_expression() {
		Value_or_expressionContext _localctx = new Value_or_expressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_value_or_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(OR);
			State = 258; term5();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term5Context : ParserRuleContext {
		public Term4Context[] term4() {
			return GetRuleContexts<Term4Context>();
		}
		public Term4Context term4(int i) {
			return GetRuleContext<Term4Context>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(mdxParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(mdxParser.AND, i);
		}
		public Term5Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term5; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterTerm5(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitTerm5(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm5(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term5Context term5() {
		Term5Context _localctx = new Term5Context(Context, State);
		EnterRule(_localctx, 58, RULE_term5);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; term4();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 261; Match(AND);
				State = 262; term4();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term4Context : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(mdxParser.NOT, 0); }
		public Term4Context term4() {
			return GetRuleContext<Term4Context>(0);
		}
		public Term3Context term3() {
			return GetRuleContext<Term3Context>(0);
		}
		public Term4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term4; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterTerm4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitTerm4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term4Context term4() {
		Term4Context _localctx = new Term4Context(Context, State);
		EnterRule(_localctx, 60, RULE_term4);
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; Match(NOT);
				State = 269; term4();
				}
				break;
			case LBRACE:
			case LPAREN:
			case MINUS:
			case PLUS:
			case CASE:
			case DIMENSION:
			case PROPERTIES:
			case NUMBER:
			case ID:
			case QUOTED_ID:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; term3();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term3Context : ParserRuleContext {
		public Term2Context[] term2() {
			return GetRuleContexts<Term2Context>();
		}
		public Term2Context term2(int i) {
			return GetRuleContext<Term2Context>(i);
		}
		public Comp_opContext[] comp_op() {
			return GetRuleContexts<Comp_opContext>();
		}
		public Comp_opContext comp_op(int i) {
			return GetRuleContext<Comp_opContext>(i);
		}
		public Term3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term3; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterTerm3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitTerm3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term3Context term3() {
		Term3Context _localctx = new Term3Context(Context, State);
		EnterRule(_localctx, 62, RULE_term3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; term2();
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GE) | (1L << GT) | (1L << LE) | (1L << LT) | (1L << NE))) != 0)) {
				{
				{
				State = 274; comp_op();
				State = 275; term2();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term2Context : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] CONCAT() { return GetTokens(mdxParser.CONCAT); }
		public ITerminalNode CONCAT(int i) {
			return GetToken(mdxParser.CONCAT, i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(mdxParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(mdxParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(mdxParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(mdxParser.MINUS, i);
		}
		public Term2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterTerm2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitTerm2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term2Context term2() {
		Term2Context _localctx = new Term2Context(Context, State);
		EnterRule(_localctx, 64, RULE_term2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; term();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONCAT) | (1L << MINUS) | (1L << PLUS))) != 0)) {
				{
				{
				State = 283;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONCAT) | (1L << MINUS) | (1L << PLUS))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 284; term();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public ITerminalNode[] SOLIDUS() { return GetTokens(mdxParser.SOLIDUS); }
		public ITerminalNode SOLIDUS(int i) {
			return GetToken(mdxParser.SOLIDUS, i);
		}
		public ITerminalNode[] ASTERISK() { return GetTokens(mdxParser.ASTERISK); }
		public ITerminalNode ASTERISK(int i) {
			return GetToken(mdxParser.ASTERISK, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 66, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; factor();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ASTERISK || _la==SOLIDUS) {
				{
				{
				State = 291;
				_la = TokenStream.LA(1);
				if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 292; factor();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ITerminalNode MINUS() { return GetToken(mdxParser.MINUS, 0); }
		public Value_expression_primaryContext value_expression_primary() {
			return GetRuleContext<Value_expression_primaryContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(mdxParser.PLUS, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 68, RULE_factor);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298; Match(MINUS);
				State = 299; value_expression_primary();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300; Match(PLUS);
				State = 301; value_expression_primary();
				}
				break;
			case LBRACE:
			case LPAREN:
			case CASE:
			case DIMENSION:
			case PROPERTIES:
			case NUMBER:
			case ID:
			case QUOTED_ID:
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302; value_expression_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(mdxParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(mdxParser.RPAREN, 0); }
		public Exp_listContext exp_list() {
			return GetRuleContext<Exp_listContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 70, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; identifier();
			State = 306; Match(LPAREN);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LPAREN) | (1L << MINUS) | (1L << PLUS) | (1L << CASE) | (1L << DIMENSION) | (1L << NOT) | (1L << PROPERTIES) | (1L << NUMBER) | (1L << ID) | (1L << QUOTED_ID) | (1L << STRING))) != 0)) {
				{
				State = 307; exp_list();
				}
			}

			State = 310; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_expression_primaryContext : ParserRuleContext {
		public Value_expression_primary0Context value_expression_primary0() {
			return GetRuleContext<Value_expression_primary0Context>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(mdxParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(mdxParser.DOT, i);
		}
		public Unquoted_identifierContext[] unquoted_identifier() {
			return GetRuleContexts<Unquoted_identifierContext>();
		}
		public Unquoted_identifierContext unquoted_identifier(int i) {
			return GetRuleContext<Unquoted_identifierContext>(i);
		}
		public Quoted_identifierContext[] quoted_identifier() {
			return GetRuleContexts<Quoted_identifierContext>();
		}
		public Quoted_identifierContext quoted_identifier(int i) {
			return GetRuleContext<Quoted_identifierContext>(i);
		}
		public Amp_quoted_identifierContext[] amp_quoted_identifier() {
			return GetRuleContexts<Amp_quoted_identifierContext>();
		}
		public Amp_quoted_identifierContext amp_quoted_identifier(int i) {
			return GetRuleContext<Amp_quoted_identifierContext>(i);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public Value_expression_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_expression_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterValue_expression_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitValue_expression_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_expression_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_expression_primaryContext value_expression_primary() {
		Value_expression_primaryContext _localctx = new Value_expression_primaryContext(Context, State);
		EnterRule(_localctx, 72, RULE_value_expression_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; value_expression_primary0();
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 313; Match(DOT);
				State = 318;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 314; unquoted_identifier();
					}
					break;
				case 2:
					{
					State = 315; quoted_identifier();
					}
					break;
				case 3:
					{
					State = 316; amp_quoted_identifier();
					}
					break;
				case 4:
					{
					State = 317; function();
					}
					break;
				}
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_expression_primary0Context : ParserRuleContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(mdxParser.LPAREN, 0); }
		public Exp_listContext exp_list() {
			return GetRuleContext<Exp_listContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(mdxParser.RPAREN, 0); }
		public ITerminalNode LBRACE() { return GetToken(mdxParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(mdxParser.RBRACE, 0); }
		public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(mdxParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(mdxParser.NUMBER, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Value_expression_primary0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_expression_primary0; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterValue_expression_primary0(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitValue_expression_primary0(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_expression_primary0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_expression_primary0Context value_expression_primary0() {
		Value_expression_primary0Context _localctx = new Value_expression_primary0Context(Context, State);
		EnterRule(_localctx, 74, RULE_value_expression_primary0);
		int _la;
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 326; Match(LPAREN);
				State = 327; exp_list();
				State = 328; Match(RPAREN);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 330; Match(LBRACE);
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LPAREN) | (1L << MINUS) | (1L << PLUS) | (1L << CASE) | (1L << DIMENSION) | (1L << NOT) | (1L << PROPERTIES) | (1L << NUMBER) | (1L << ID) | (1L << QUOTED_ID) | (1L << STRING))) != 0)) {
					{
					State = 331; exp_list();
					}
				}

				State = 334; Match(RBRACE);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 335; case_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 336; Match(STRING);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 337; Match(NUMBER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 338; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(mdxParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(mdxParser.COMMA, i);
		}
		public Exp_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterExp_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitExp_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exp_listContext exp_list() {
		Exp_listContext _localctx = new Exp_listContext(Context, State);
		EnterRule(_localctx, 76, RULE_exp_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; expression();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 342; Match(COMMA);
				State = 343; expression();
				}
				}
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(mdxParser.CASE, 0); }
		public ITerminalNode END() { return GetToken(mdxParser.END, 0); }
		public Value_expressionContext[] value_expression() {
			return GetRuleContexts<Value_expressionContext>();
		}
		public Value_expressionContext value_expression(int i) {
			return GetRuleContext<Value_expressionContext>(i);
		}
		public When_listContext when_list() {
			return GetRuleContext<When_listContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(mdxParser.ELSE, 0); }
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_case_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(CASE);
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LPAREN) | (1L << MINUS) | (1L << PLUS) | (1L << CASE) | (1L << DIMENSION) | (1L << NOT) | (1L << PROPERTIES) | (1L << NUMBER) | (1L << ID) | (1L << QUOTED_ID) | (1L << STRING))) != 0)) {
				{
				State = 350; value_expression();
				}
			}

			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 353; when_list();
				}
			}

			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 356; Match(ELSE);
				State = 357; value_expression();
				}
			}

			State = 360; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_listContext : ParserRuleContext {
		public When_clauseContext[] when_clause() {
			return GetRuleContexts<When_clauseContext>();
		}
		public When_clauseContext when_clause(int i) {
			return GetRuleContext<When_clauseContext>(i);
		}
		public When_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterWhen_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitWhen_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_listContext when_list() {
		When_listContext _localctx = new When_listContext(Context, State);
		EnterRule(_localctx, 80, RULE_when_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; when_clause();
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 363; when_clause();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(mdxParser.WHEN, 0); }
		public Value_expressionContext[] value_expression() {
			return GetRuleContexts<Value_expressionContext>();
		}
		public Value_expressionContext value_expression(int i) {
			return GetRuleContext<Value_expressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(mdxParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterWhen_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitWhen_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_clauseContext when_clause() {
		When_clauseContext _localctx = new When_clauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(WHEN);
			State = 370; value_expression();
			State = 371; Match(THEN);
			State = 372; value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_opContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(mdxParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(mdxParser.NE, 0); }
		public ITerminalNode LT() { return GetToken(mdxParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(mdxParser.GT, 0); }
		public ITerminalNode LE() { return GetToken(mdxParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(mdxParser.GE, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterComp_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitComp_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_opContext comp_op() {
		Comp_opContext _localctx = new Comp_opContext(Context, State);
		EnterRule(_localctx, 84, RULE_comp_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GE) | (1L << GT) | (1L << LE) | (1L << LT) | (1L << NE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public Unquoted_identifierContext unquoted_identifier() {
			return GetRuleContext<Unquoted_identifierContext>(0);
		}
		public Quoted_identifierContext quoted_identifier() {
			return GetRuleContext<Quoted_identifierContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIMENSION:
			case PROPERTIES:
			case ID:
				{
				State = 376; unquoted_identifier();
				}
				break;
			case QUOTED_ID:
				{
				State = 377; quoted_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unquoted_identifierContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode ID() { return GetToken(mdxParser.ID, 0); }
		public Unquoted_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquoted_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterUnquoted_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitUnquoted_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquoted_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unquoted_identifierContext unquoted_identifier() {
		Unquoted_identifierContext _localctx = new Unquoted_identifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_unquoted_identifier);
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIMENSION:
			case PROPERTIES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380; keyword();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Amp_quoted_identifierContext : ParserRuleContext {
		public ITerminalNode AMP_QUOTED_ID() { return GetToken(mdxParser.AMP_QUOTED_ID, 0); }
		public Amp_quoted_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amp_quoted_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterAmp_quoted_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitAmp_quoted_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmp_quoted_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Amp_quoted_identifierContext amp_quoted_identifier() {
		Amp_quoted_identifierContext _localctx = new Amp_quoted_identifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_amp_quoted_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(AMP_QUOTED_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quoted_identifierContext : ParserRuleContext {
		public ITerminalNode QUOTED_ID() { return GetToken(mdxParser.QUOTED_ID, 0); }
		public Quoted_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quoted_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterQuoted_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitQuoted_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuoted_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quoted_identifierContext quoted_identifier() {
		Quoted_identifierContext _localctx = new Quoted_identifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_quoted_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(QUOTED_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode DIMENSION() { return GetToken(mdxParser.DIMENSION, 0); }
		public ITerminalNode PROPERTIES() { return GetToken(mdxParser.PROPERTIES, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImdxListener typedListener = listener as ImdxListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImdxVisitor<TResult> typedVisitor = visitor as ImdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 94, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_la = TokenStream.LA(1);
			if ( !(_la==DIMENSION || _la==PROPERTIES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x189', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'h', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'l', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'r', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'u', '\n', '\x3', 
		'\x3', '\x4', '\x6', '\x4', 'x', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 
		'y', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '~', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x88', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x92', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x96', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\x9B', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x9E', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\xA3', '\n', '\t', '\f', '\t', '\xE', '\t', '\xA6', '\v', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\xB3', '\n', '\r', '\f', '\r', '\xE', '\r', '\xB6', '\v', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xBA', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xBE', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x5', '\x10', '\xC6', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xCE', 
		'\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xD1', '\v', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x5', '\x16', '\xDC', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xE4', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\xE7', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\xEB', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', 
		'\x1B', '\xF4', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\xF7', '\v', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\xFC', 
		'\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\xFF', '\v', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x10A', 
		'\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x10D', '\v', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x112', '\n', ' ', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x118', '\n', '!', '\f', 
		'!', '\xE', '!', '\x11B', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\a', '\"', '\x120', '\n', '\"', '\f', '\"', '\xE', '\"', '\x123', 
		'\v', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', '\x128', '\n', 
		'#', '\f', '#', '\xE', '#', '\x12B', '\v', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x132', '\n', '$', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x5', '%', '\x137', '\n', '%', '\x3', '%', 
		'\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x5', '&', '\x141', '\n', '&', '\a', '&', '\x143', '\n', 
		'&', '\f', '&', '\xE', '&', '\x146', '\v', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', 
		'\'', '\x14F', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x156', '\n', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\a', '(', '\x15B', '\n', '(', '\f', '(', '\xE', '(', 
		'\x15E', '\v', '(', '\x3', ')', '\x3', ')', '\x5', ')', '\x162', '\n', 
		')', '\x3', ')', '\x5', ')', '\x165', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x169', '\n', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', 
		'*', '\a', '*', '\x16F', '\n', '*', '\f', '*', '\xE', '*', '\x172', '\v', 
		'*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		',', '\x3', ',', '\x3', '-', '\x3', '-', '\x5', '-', '\x17D', '\n', '-', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x181', '\n', '.', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x2', '\x2', '\x32', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x2', '\a', '\x5', '\x2', '\x1B', 
		'\x1B', '!', '!', '.', '.', '\x5', '\x2', '\b', '\b', '\x11', '\x11', 
		'\x13', '\x13', '\x4', '\x2', '\x4', '\x4', '\x16', '\x16', '\x6', '\x2', 
		'\n', '\f', '\xE', '\xE', '\x10', '\x10', '\x12', '\x12', '\x4', '\x2', 
		'\x1D', '\x1D', ')', ')', '\x2', '\x188', '\x2', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'g', '\x3', '\x2', '\x2', '\x2', '\x6', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\b', '}', '\x3', '\x2', '\x2', '\x2', '\n', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x97', '\x3', '\x2', '\x2', '\x2', '\x10', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xCA', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '$', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xD6', '\x3', '\x2', '\x2', '\x2', '(', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xDB', '\x3', '\x2', '\x2', '\x2', ',', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\x32', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xF0', '\x3', '\x2', '\x2', '\x2', '\x36', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x100', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '<', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x111', '\x3', '\x2', '\x2', '\x2', '@', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x46', '\x131', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x133', '\x3', '\x2', '\x2', '\x2', 'J', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x155', '\x3', '\x2', '\x2', '\x2', 'N', '\x157', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x16C', '\x3', '\x2', '\x2', '\x2', 'T', '\x173', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x178', '\x3', '\x2', '\x2', '\x2', 'X', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x182', '\x3', '\x2', '\x2', '\x2', '^', '\x184', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x186', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\x5', '\x4', '\x3', '\x2', '\x63', '\x64', '\a', '\x2', '\x2', '\x3', 
		'\x64', '\x3', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x32', 
		'\x2', '\x2', '\x66', 'h', '\x5', '\x6', '\x4', '\x2', 'g', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'k', '\a', '*', '\x2', '\x2', 'j', 'l', '\x5', 
		'\xE', '\b', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', 
		'\"', '\x2', '\x2', 'n', 'q', '\x5', '$', '\x13', '\x2', 'o', 'p', '\a', 
		'\x30', '\x2', '\x2', 'p', 'r', '\x5', '(', '\x15', '\x2', 'q', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x3', 
		'\x2', '\x2', '\x2', 's', 'u', '\x5', '*', '\x16', '\x2', 't', 's', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'v', 'x', '\x5', '\b', '\x5', '\x2', 'w', 
		'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 
		'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
		'z', '\a', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x5', '\f', '\a', '\x2', 
		'|', '~', '\x5', '\n', '\x6', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', 
		'}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\a', ',', '\x2', '\x2', '\x80', '\x81', '\x5', 
		'\x16', '\f', '\x2', '\x81', '\x87', '\a', '\x18', '\x2', '\x2', '\x82', 
		'\x83', '\a', '\x3', '\x2', '\x2', '\x83', '\x84', '\x5', '\x34', '\x1B', 
		'\x2', '\x84', '\x85', '\a', '\x3', '\x2', '\x2', '\x85', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x88', '\x5', '\x34', '\x1B', '\x2', '\x87', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\v', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', 
		'$', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x12', '\n', '\x2', '\x8B', 
		'\x91', '\a', '\x18', '\x2', '\x2', '\x8C', '\x8D', '\a', '\x3', '\x2', 
		'\x2', '\x8D', '\x8E', '\x5', '\x36', '\x1C', '\x2', '\x8E', '\x8F', '\a', 
		'\x3', '\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x92', '\x5', '\x36', '\x1C', '\x2', '\x91', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x95', '\a', '\a', '\x2', '\x2', '\x94', 
		'\x96', '\x5', '\x10', '\t', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x9C', '\x5', '\x1A', '\xE', '\x2', '\x98', 
		'\x99', '\a', '\a', '\x2', '\x2', '\x99', '\x9B', '\x5', '\x1A', '\xE', 
		'\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA4', '\x5', 
		'\x14', '\v', '\x2', '\xA0', '\xA1', '\a', '\a', '\x2', '\x2', '\xA1', 
		'\xA3', '\x5', '\x14', '\v', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x5', '\x18', '\r', '\x2', '\xA8', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAA', '\x5', 'X', '-', '\x2', '\xAA', '\xAB', 
		'\a', '\n', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x36', '\x1C', '\x2', 
		'\xAC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x18', 
		'\r', '\x2', '\xAE', '\x17', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB4', 
		'\x5', 'X', '-', '\x2', '\xB0', '\xB1', '\a', '\t', '\x2', '\x2', '\xB1', 
		'\xB3', '\x5', 'X', '-', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB8', '\a', '%', '\x2', '\x2', '\xB8', '\xBA', '\a', '\x1F', 
		'\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xBD', '\x5', '\x34', '\x1B', '\x2', '\xBC', '\xBE', '\x5', '\x1E', 
		'\x10', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC0', '\a', '\'', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\x1C', 
		'\xF', '\x2', '\xC1', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', 
		'\x5', 'X', '-', '\x2', '\xC3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC6', '\a', '\x1D', '\x2', '\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', ')', '\x2', '\x2', '\xC8', 
		'\xC9', '\x5', ' ', '\x11', '\x2', '\xC9', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCF', '\x5', '\"', '\x12', '\x2', '\xCB', '\xCC', '\a', 
		'\a', '\x2', '\x2', '\xCC', '\xCE', '\x5', '\"', '\x12', '\x2', '\xCD', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '!', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x18', '\r', 
		'\x2', '\xD3', '#', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x5', 
		'&', '\x14', '\x2', '\xD5', '%', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\x5', '\x18', '\r', '\x2', '\xD7', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD9', '\x5', '\x34', '\x1B', '\x2', '\xD9', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDC', '\a', '\x1A', '\x2', '\x2', '\xDB', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', ')', 
		'\x2', '\x2', '\xDE', '\xDF', '\x5', ',', '\x17', '\x2', '\xDF', '+', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x5', '.', '\x18', '\x2', 
		'\xE1', '\xE5', '\a', '\a', '\x2', '\x2', '\xE2', '\xE4', '\x5', '.', 
		'\x18', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', 
		'\x5', '\x30', '\x19', '\x2', '\xE9', '\xEB', '\x5', '\x32', '\x1A', '\x2', 
		'\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '/', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\t', '\x2', '\x2', '\x2', '\xED', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEF', '\x5', 'X', '-', '\x2', '\xEF', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF5', '\x5', '\x36', '\x1C', '\x2', '\xF1', '\xF2', 
		'\a', '\x5', '\x2', '\x2', '\xF2', '\xF4', '\x5', '\x36', '\x1C', '\x2', 
		'\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFD', '\x5', '<', 
		'\x1F', '\x2', '\xF9', '\xFC', '\x5', '\x38', '\x1D', '\x2', '\xFA', '\xFC', 
		'\x5', ':', '\x1E', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\a', '\x31', 
		'\x2', '\x2', '\x101', '\x102', '\x5', '<', '\x1F', '\x2', '\x102', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\a', '(', '\x2', '\x2', 
		'\x104', '\x105', '\x5', '<', '\x1F', '\x2', '\x105', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x106', '\x10B', '\x5', '>', ' ', '\x2', '\x107', '\x108', 
		'\a', '\x17', '\x2', '\x2', '\x108', '\x10A', '\x5', '>', ' ', '\x2', 
		'\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', 
		'\a', '&', '\x2', '\x2', '\x10F', '\x112', '\x5', '>', ' ', '\x2', '\x110', 
		'\x112', '\x5', '@', '!', '\x2', '\x111', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x119', '\x5', '\x42', '\"', '\x2', '\x114', 
		'\x115', '\x5', 'V', ',', '\x2', '\x115', '\x116', '\x5', '\x42', '\"', 
		'\x2', '\x116', '\x118', '\x3', '\x2', '\x2', '\x2', '\x117', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x117', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x41', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x121', '\x5', '\x44', 
		'#', '\x2', '\x11D', '\x11E', '\t', '\x3', '\x2', '\x2', '\x11E', '\x120', 
		'\x5', '\x44', '#', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x123', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x129', '\x5', '\x46', '$', '\x2', '\x125', '\x126', 
		'\t', '\x4', '\x2', '\x2', '\x126', '\x128', '\x5', '\x46', '$', '\x2', 
		'\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\a', '\x11', '\x2', '\x2', '\x12D', '\x132', '\x5', 'J', '&', '\x2', 
		'\x12E', '\x12F', '\a', '\x13', '\x2', '\x2', '\x12F', '\x132', '\x5', 
		'J', '&', '\x2', '\x130', '\x132', '\x5', 'J', '&', '\x2', '\x131', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x130', '\x3', '\x2', '\x2', '\x2', '\x132', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x133', '\x134', '\x5', 'X', '-', '\x2', '\x134', '\x136', 
		'\a', '\xF', '\x2', '\x2', '\x135', '\x137', '\x5', 'N', '(', '\x2', '\x136', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', 
		'\a', '\x15', '\x2', '\x2', '\x139', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x144', '\x5', 'L', '\'', '\x2', '\x13B', '\x140', '\a', '\t', 
		'\x2', '\x2', '\x13C', '\x141', '\x5', 'Z', '.', '\x2', '\x13D', '\x141', 
		'\x5', '^', '\x30', '\x2', '\x13E', '\x141', '\x5', '\\', '/', '\x2', 
		'\x13F', '\x141', '\x5', 'H', '%', '\x2', '\x140', '\x13C', '\x3', '\x2', 
		'\x2', '\x2', '\x140', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x143', '\x3', '\x2', '\x2', '\x2', '\x142', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '\x146', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x145', 'K', '\x3', '\x2', '\x2', '\x2', '\x146', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x156', '\x5', 'H', '%', '\x2', '\x148', 
		'\x149', '\a', '\xF', '\x2', '\x2', '\x149', '\x14A', '\x5', 'N', '(', 
		'\x2', '\x14A', '\x14B', '\a', '\x15', '\x2', '\x2', '\x14B', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', '\a', '\r', '\x2', '\x2', 
		'\x14D', '\x14F', '\x5', 'N', '(', '\x2', '\x14E', '\x14D', '\x3', '\x2', 
		'\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x156', '\a', '\x14', '\x2', '\x2', 
		'\x151', '\x156', '\x5', 'P', ')', '\x2', '\x152', '\x156', '\a', '\x38', 
		'\x2', '\x2', '\x153', '\x156', '\a', '\x33', '\x2', '\x2', '\x154', '\x156', 
		'\x5', 'X', '-', '\x2', '\x155', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x148', '\x3', '\x2', '\x2', '\x2', '\x155', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x155', '\x151', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x157', '\x15C', '\x5', '\x34', '\x1B', '\x2', '\x158', 
		'\x159', '\a', '\a', '\x2', '\x2', '\x159', '\x15B', '\x5', '\x34', '\x1B', 
		'\x2', '\x15A', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15D', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x15E', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x161', 
		'\a', '\x19', '\x2', '\x2', '\x160', '\x162', '\x5', '\x36', '\x1C', '\x2', 
		'\x161', '\x160', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x164', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x165', '\x5', 'R', '*', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\a', '\x1E', '\x2', '\x2', 
		'\x167', '\x169', '\x5', '\x36', '\x1C', '\x2', '\x168', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16A', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\a', ' ', '\x2', 
		'\x2', '\x16B', 'Q', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x170', '\x5', 
		'T', '+', '\x2', '\x16D', '\x16F', '\x5', 'T', '+', '\x2', '\x16E', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x171', 'S', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\a', '/', '\x2', 
		'\x2', '\x174', '\x175', '\x5', '\x36', '\x1C', '\x2', '\x175', '\x176', 
		'\a', '-', '\x2', '\x2', '\x176', '\x177', '\x5', '\x36', '\x1C', '\x2', 
		'\x177', 'U', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\t', '\x5', 
		'\x2', '\x2', '\x179', 'W', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17D', 
		'\x5', 'Z', '.', '\x2', '\x17B', '\x17D', '\x5', '^', '\x30', '\x2', '\x17C', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', 'Y', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', '\x5', 
		'`', '\x31', '\x2', '\x17F', '\x181', '\a', '\x35', '\x2', '\x2', '\x180', 
		'\x17E', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '[', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\a', 
		'\x36', '\x2', '\x2', '\x183', ']', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\a', '\x37', '\x2', '\x2', '\x185', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x187', '\t', '\x6', '\x2', '\x2', '\x187', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '*', 'g', 'k', 'q', 't', 'y', '}', '\x87', '\x91', 
		'\x95', '\x9C', '\xA4', '\xB4', '\xB9', '\xBD', '\xC5', '\xCF', '\xDB', 
		'\xE5', '\xEA', '\xF5', '\xFB', '\xFD', '\x10B', '\x111', '\x119', '\x121', 
		'\x129', '\x131', '\x136', '\x140', '\x144', '\x14E', '\x155', '\x15C', 
		'\x161', '\x164', '\x168', '\x170', '\x17C', '\x180',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
